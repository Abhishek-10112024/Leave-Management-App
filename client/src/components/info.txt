// Flow of code between employeeDashboard and EditLeaveModal:
Parent Component (employeeDashboard):

    Props and State Management:
        The parent component manages the state of the leave requests in the leaveRequests and filteredLeaves arrays.
        When the user wants to edit a leave request, the openEditModal function is called, which sets selectedLeaveRequest to the specific leave request that the user wants to edit and changes showEditModal to true.

    Displaying the Modal:
        In the parent component, the EditLeaveModal is conditionally rendered using {#if showEditModal}.
        The leaveRequest prop is passed to the modal as leaveRequest={selectedLeaveRequest}. This means that the modal has access to the specific leave request data that the user is editing.

    Event Handling:
        The parent component listens for the close event from the EditLeaveModal using on:close={closeEditModal}.
        When this event is dispatched from the child component, the parent calls the closeEditModal function, which resets the modal state (sets showEditModal to false and selectedLeaveRequest to null) and optionally fetches updated leave requests.

Child Component (EditLeaveModal)

    Receiving Props:
        The child component receives the leaveRequest prop, which contains the details of the leave request to be edited (e.g., leave_from, leave_to, reason).

    Updating Leave Requests:
        The updateLeave function is responsible for sending the updated leave request back to the server using a PATCH request.
        If the request is successful, it dispatches a close event, which is caught by the parent component to close the modal and potentially refresh the leave requests.

    Deleting Leave Requests:
        The deleteLeave function allows users to delete the leave request. If the deletion is successful, it also dispatches the close event.

    Handling Errors:
        If there are any errors during updating or deleting the leave request, the error message is displayed in the modal, allowing users to see feedback directly.

    Modal Control:
        The closeModal function dispatches the close event, which signals the parent component to close the modal without any action.

Interaction Flow

    Opening the Modal:
        The user clicks the "Edit" button in the parent component's table. This calls openEditModal, passing the selected leave request.
        The modal is displayed with the details of the leave request.

    Updating or Deleting:
        The user can update the leave request details and click "Update Leave Request." This triggers the updateLeave function in the child.
        If the update is successful, the modal dispatches a close event, closing the modal in the parent and fetching updated leave requests.
        Alternatively, if the user clicks "Delete Leave Request," the deleteLeave function is called, and a similar event flow occurs if the deletion is successful.

    Closing the Modal:
        Whether the user clicks "Cancel" or if an update/delete is successful, the modal is closed by dispatching a close event, which is handled by the parent component to reset state.


// Flow of code between employeeDashboard and ApplyLeaveModal & ApplyLeaveModal and EditLeaveModal:

Interactivity Between Parent and Child Components:
1. Data Flow from Parent to Child:

    Props: In both child components (EditLeaveModal and ApplyLeaveModal), the parent component passes data as props. For ApplyLeaveModal, the parent does not pass any specific data, but it likely uses the modal's visibility state to determine when to render it.
    Functionality: Each modal is responsible for handling its own data and actions:
        ApplyLeaveModal gathers input data (leave dates and reason) and handles leave application.
        EditLeaveModal handles editing existing leave requests.

2. Event Dispatching:

    Close Event: Both child components dispatch a close event to notify the parent when they should be closed:
        In ApplyLeaveModal, after a successful leave application, the modal dispatches the close event and navigates the user to the /employee route.
        In EditLeaveModal, the close event is dispatched after updating or deleting a leave request.

    Parent Listening: In the parent component, you listen for the close event emitted from each modal, allowing the parent to execute the appropriate logic (like resetting state or updating the UI).

Sibling Component Interactivity:
1. Interaction Through Parent:

    While ApplyLeaveModal and EditLeaveModal are siblings, they do not interact directly with each other. Instead, their interaction is mediated through the parent component:
        Visibility Control: The parent component controls which modal is displayed using showEditModal and showApplyModal. When one modal is opened (e.g., showEditModal = true), the other should not be displayed (e.g., showApplyModal = false).
    State Management: The parent can maintain shared state if necessary. For example, if an action in one modal affects the data displayed or the state of the other modal, the parent can manage that state and trigger updates as needed.

2. User Experience:

    When a user applies for leave using ApplyLeaveModal:
        Upon successful submission, the modal closes, and the user is navigated back to the employee dashboard.
        If a user wants to edit an existing leave request, they can open EditLeaveModal and make changes. Once they submit those changes, it will also close, potentially updating the displayed list of leave requests in the parent component.

Summary

    Interactivity: The parent component serves as the central hub for controlling the behavior of both child modals. Each child component handles its own logic for submitting leave requests or editing existing requests, dispatching events to the parent to signal completion or closure.
    Sibling Interaction: There’s no direct interaction between the sibling components; instead, they rely on the parent for visibility and state management, ensuring a clear separation of concerns while maintaining a cohesive user experience.






// Key Svelte Concepts:
1. Props

    Definition: Props are a way to pass data from a parent component to a child component in Svelte.
    Usage: In the child component, you declare props using export let propName;. In the parent component, you use the child component and assign values to these props.
    Example:

    // Parent.svelte
    <Child propValue={someValue} />

    // Child.svelte
    <script>
        export let propValue;
    </script>

2. Event Handling

    Definition: Svelte allows you to handle user events such as clicks, input changes, and more.
    Usage: You can bind event handlers directly in your markup using the on:eventName syntax.
    Example:

    <button on:click={handleClick}>Click me</button>

    <script>
        function handleClick() {
            console.log('Button clicked!');
        }
    </script>

3. Stores

    Definition: Stores are a way to manage state in Svelte applications, especially for shared state across components.
    Types: Svelte has three built-in store types:
        Writable: Can be read and updated.
        Readable: Can only be read, useful for derived data.
        Derived: Computes values from one or more other stores.
    Usage: You import the store and subscribe to it using the $ prefix for automatic reactivity.
    Example:

    // store.js
    import { writable } from 'svelte/store';

    export const count = writable(0);

    // Component.svelte
    <script>
        import { count } from './store.js';
    </script>

    <button on:click={() => $count += 1}>Increment</button>
    <p>Count: {$count}</p>

4. Slots

    Definition: Slots allow you to create flexible components by letting parent components provide content to child components.
    Default Slot: Use <slot></slot> in the child to specify where the parent content should go.
    Named Slots: You can create named slots to organize content more clearly.
    Example:

    // Child.svelte
    <slot></slot>

    // Parent.svelte
    <Child>
        <p>This content goes into the child component's slot!</p>
    </Child>

5. Reactive Statements

    Definition: Svelte provides a simple syntax for declaring reactive statements that automatically update when their dependencies change.
    Usage: Use the $: syntax to create a reactive statement.
    Example:

    <script>
        let count = 0;
        $: doubleCount = count * 2; // Automatically updates when count changes
    </script>

6. Lifecycle Functions

    Definition: Svelte provides lifecycle functions that allow you to run code at specific times in a component’s lifecycle.
    Common Lifecycle Functions:
        onMount: Runs after the component is first rendered.
        beforeUpdate: Runs before the component updates.
        afterUpdate: Runs after the component updates.
        onDestroy: Runs when the component is destroyed.
    Example:

    <script>
        import { onMount } from 'svelte';
        
        onMount(() => {
            console.log('Component mounted');
        });
    </script>

7. Transitions and Animations

    Definition: Svelte supports built-in transitions and animations to enhance the user experience.
    Usage: You can use the transition directive to apply transitions when elements enter or leave the DOM.
    Example:

    <script>
        import { fade } from 'svelte/transition';
        let show = true;
    </script>

    {#if show}
        <div transition:fade>Fade in and out</div>
    {/if}

    <button on:click={() => show = !show}>Toggle</button>

8. Context API

    Definition: The Context API allows you to pass data deeply through the component tree without having to pass props at every level.
    Usage: Use setContext to provide data and getContext to consume it.
    Example:

// Parent.svelte
import { setContext } from 'svelte';
const theme = { color: 'blue' };
setContext('theme', theme);

// Child.svelte
import { getContext } from 'svelte';
const theme = getContext('theme');





// Different ways of interaction between Different svelte components:
1. Props

    Sending Data: You can pass data from a parent component to a child component using props.
    Listening to Changes: The child component can use the props directly and react to changes.

Example:

<!-- Parent.svelte -->
<Child propData={someData} />

<!-- Child.svelte -->
<script>
    export let propData;
</script>

2. Event Dispatching

    Sending Data: Child components can use createEventDispatcher to send events back to their parent component.
    Listening to Events: The parent component listens for these events and can react accordingly.

Example:

<!-- Child.svelte -->
<script>
    import { createEventDispatcher } from 'svelte';
    const dispatch = createEventDispatcher();
    
    function sendData() {
        dispatch('dataSent', { someData: 'Hello' });
    }
</script>
<button on:click={sendData}>Send Data</button>

<!-- Parent.svelte -->
<Child on:dataSent={event => console.log(event.detail.someData)} />

3. Svelte Stores

    Global State Management: Svelte stores (writable, readable, derived) allow you to share data between any components, regardless of their relationship.
    Listening to Changes: Components can subscribe to store changes and react accordingly.

Example:

// store.js
import { writable } from 'svelte/store';
export const sharedStore = writable('Initial Value');

// Component A
<script>
    import { sharedStore } from './store.js';
    let value;
    sharedStore.subscribe(val => value = val);
</script>

// Component B
<script>
    import { sharedStore } from './store.js';
    
    function updateValue() {
        sharedStore.set('New Value');
    }
</script>
<button on:click={updateValue}>Update Value</button>

// Difference between subscribe and set:
Feature	                    subscribe	                                           set
Purpose	                    Listen for changes to the store's value	               Update the store's value
Use Case	                Use when you need to react to value changes	           Use when you want to change the value
Return Value	            Returns an unsubscribe function	                       Does not return anything
Invocation	                Takes a callback function	                           Takes a new value as an argument

4. Context API

    Sharing Data: The context API allows you to share data across a component hierarchy without having to pass props down through every level.
    Setting Context: Use setContext in a parent component.
    Getting Context: Use getContext in any descendant component.

Example:

// Parent.svelte
<script>
    import { setContext } from 'svelte';
    setContext('key', 'Shared Data');
</script>

// Child.svelte
<script>
    import { getContext } from 'svelte';
    const data = getContext('key');
</script>

5. Slots

    Passing Content: Slots allow you to pass HTML or components from a parent to a child, enabling flexible content rendering.
    Listening to Events: You can combine slots with event dispatching to create interactive components.

Example:

<!-- Parent.svelte -->
<Child>
    <button on:click={() => console.log('Slot button clicked')}>Click Me</button>
</Child>

<!-- Child.svelte -->
<slot></slot>


Here's an overview of the key lifecycle methods in Svelte:
1. onMount

    Runs when the component has been added to the DOM (i.e., when the component has finished rendering).
    This is often used to run any code that needs access to the DOM, like setting up event listeners, making API calls, or performing animations.

<script>
  import { onMount } from 'svelte';

  onMount(() => {
    console.log('Component mounted');
  });
</script>

2. beforeUpdate

    Runs before the DOM is updated when reactive state changes, but after the component's state has been updated.
    This can be useful for performing tasks or calculations right before a re-render.

<script>
  import { beforeUpdate } from 'svelte';

  beforeUpdate(() => {
    console.log('State is about to update');
  });
</script>

3. afterUpdate

    Runs after the DOM has been updated following a state change.
    This is useful for handling any side effects that depend on the updated DOM or state.

<script>
  import { afterUpdate } from 'svelte';

  afterUpdate(() => {
    console.log('Component updated');
  });
</script>

4. onDestroy

    Runs when the component is about to be removed from the DOM.
    It's often used for cleanup tasks, like clearing timers or removing event listeners.

<script>
  import { onDestroy } from 'svelte';

  onDestroy(() => {
    console.log('Component destroyed');
  });
</script>

5. tick

    A special function that returns a promise which resolves after the DOM has been updated.
    This can be used when you need to wait for the DOM to finish rendering before doing something else, like setting focus or triggering animations.

<script>
  import { tick } from 'svelte';

  async function updateAndWait() {
    // Update the state
    someState = true;
    // Wait for DOM to update
    await tick();
    console.log('DOM has been updated');
  }
</script>

Summary of Lifecycle Methods:

    onMount: Runs once, when the component is mounted (added to the DOM).
    beforeUpdate: Runs before a reactive state change triggers a DOM update.
    afterUpdate: Runs after the DOM has been updated following a state change.
    onDestroy: Runs when the component is about to be removed from the DOM.
    tick: A promise that resolves after the DOM has been updated.



// Interaction between ChangeStatus and employeeDashboard Component:

    Parent to Child (Prop Binding):
        The currentStatus value from the parent is passed as a prop to the child component (ChangeStatus).
        The bind:value={currentStatus} ensures that the selected value in the child’s dropdown is always in sync with the parent’s currentStatus. So if the parent changes currentStatus, it will automatically update the dropdown in the child.

    Child to Parent (Event Dispatching):
        When the user selects a new status in the dropdown (<select>), the changeStatus function is triggered in the child component.
        This function dispatches the statusChange event with the newly selected status as the event detail (newStatus).
        The parent listens for this event using on:statusChange and calls handleStatusChange, which updates the parent's currentStatus.

    Parent Reacting to Changes:
        After the parent’s currentStatus is updated by the child’s event, the parent calls fetchLeaves with the updated currentStatus and other parameters like currentPage and limitValue.
        This triggers a data fetch (e.g., an API call) to update the displayed data according to the selected status and page.



// Reason for removing changeStatus prop and using evenet dispatcher only:
Why Use Props?

    Two-Way Binding (Syncing Values):
        Props are useful if you want the child component to be controlled by the parent component. In other words, the parent holds the state, and the child reflects that state.
        Using bind:value={currentStatus} creates two-way binding between the child’s dropdown and the parent’s currentStatus. When the parent updates currentStatus, the dropdown value in the child will automatically reflect that change. Likewise, when the user changes the dropdown value, the currentStatus in the parent will be updated.

    Parent Needs to Track State:
        The parent might need to keep track of the selected status because it could be part of the filtering logic (as it is in your code with fetchLeaves). For instance, the parent may use currentStatus to trigger API calls or update other parts of the UI based on the selected status.
        Props are used to pass down the current value so that the child can reflect the status the parent is currently tracking.

    Default State in Parent:
        In many cases, you want the parent component to be the source of truth for the status (currentStatus). Using props allows you to have a central place where you manage this state.
        For example, if you ever need to reset or modify the status from the parent component (perhaps due to some external action like pagination), the child component will automatically reflect those changes without needing extra logic to pass the new value from the parent.


When Props Are Not Required (Event Dispatcher Only):
        If your app is simple and you only want the dropdown in the child to set the status without any need for the parent to track or control the status, then you can definitely omit the prop. You can rely entirely on the event dispatcher to notify the parent of the new status whenever the user changes the dropdown selection.


Key Changes:
    No currentStatus Prop: You no longer need the currentStatus prop to bind the value of the dropdown, because we are no longer syncing the dropdown with the parent state.
    Event Dispatcher: The changeStatus function still dispatches the statusChange event with the selected value. The parent can listen for this event and update its state accordingly.
    The parent no longer has to pass currentStatus to the child because we’re not syncing the dropdown value with the parent.
    The parent only listens to the event and updates its own currentStatus state, which is then used in the fetchLeaves function.


So, Do You Need Props?
    Yes, if you want to control the state in the parent and ensure the dropdown in the child is always synced with that state (i.e., two-way binding with bind:value).
    No, if you just want the child to independently set the status and don’t need to track or control that status in the parent component (i.e., use the event dispatcher to notify the parent and leave the parent state management separate).



// Current interaction between LeaveManagement, Pagination and ChangeStatus:
1. LeaveManagement Component

The LeaveManagement component is the parent that controls the overall state and the data fetching process. It holds the currentPage and currentStatus variables and is responsible for updating these values when the user interacts with the child components.
Key Variables:

    currentPage: Keeps track of the current page number for pagination.
    currentStatus: Holds the current status filter (e.g., 'all', 'accepted', 'pending', 'rejected').

Functions:

    handlePageChange: This function is called when the user changes the page number. It updates the currentPage and then calls the fetchLeaveRequests function to fetch data for the selected page.

const handlePageChange = (newPage) => {
    currentPage = newPage;
    fetchLeaveRequests(currentPage, limitValue, currentStatus);  // Fetch data with the updated page
};

handleStatusChange: This function is called when the user changes the leave status (via the ChangeStatus component). It updates currentStatus and resets the page to 1 because a new status filter likely requires starting from the first page. After updating the status and resetting the page, it calls fetchLeaveRequests to fetch the data for the first page with the new status.

    const handleStatusChange = (newStatus) => {
        currentStatus = newStatus;
        currentPage = 1;  // reset the page to 1 on change in status
        fetchLeaveRequests(currentPage, limitValue, currentStatus);  // Fetch data with the updated status
    };

Child Components:

    The ChangeStatus component (which allows the user to change the status) is rendered with the current status passed as a prop. The parent listens to the statusChange event and calls handleStatusChange to update the status in the parent.

<ChangeStatus 
    currentStatus={currentStatus} 
    on:statusChange={event => handleStatusChange(event.detail)} 
/>

The Pagination component (which handles pagination) is rendered with the currentPage passed as a prop. The parent listens for the pageChange event and calls handlePageChange to update the page number in the parent.

    <Pagination 
        currentPage={currentPage} 
        on:pageChange={event => handlePageChange(event.detail)}
    />

2. ChangeStatus Component

The ChangeStatus component is a child component that allows the user to select a new leave status (e.g., "All Leaves", "Accepted", "Pending", "Rejected") from a dropdown.
Key Features:

    currentStatus is passed from the parent as a prop, and the component allows the user to change it via a select dropdown.
    The component uses Svelte's createEventDispatcher to dispatch an event when the user selects a new status. The event name is statusChange, and the new status is passed as event.detail to the parent.

Code Flow:

    Dropdown Binding: The select dropdown's value is bound to the currentStatus variable. When the user changes the value, the changeStatus function is triggered.

<select on:change={changeStatus} bind:value={currentStatus}> 
  <option value={"all"}>All Leaves</option>
  <option value="accepted">Accepted</option>
  <option value="pending">Pending</option>
  <option value="rejected">Rejected</option>
</select>

Event Dispatching: When the changeStatus function is called (on dropdown change), it gets the new status from the event.target.value and dispatches the statusChange event to the parent component with the new status.

    const changeStatus = (event) => {
        const newStatus = event.target.value;
        dispatch('statusChange', newStatus);  // This sends the new status to the parent
    };

3. Pagination Component

The Pagination component allows the user to navigate through pages of leave requests. It uses buttons for "First", "Previous", "Next", and "Last" page navigation, and shows the current page with the total number of pages (from a Svelte store).
Key Features:

    currentPage is passed from the parent as a prop, and the component allows the user to change the page using buttons.
    The component uses createEventDispatcher to send the updated page number back to the parent when the user interacts with the pagination controls.

Code Flow:

    Page Change Handling: The component has a changePage function that gets triggered when the user clicks a button to change the page. It checks if the new page is valid (i.e., within the range of available pages) and dispatches the pageChange event with the new page number.

const changePage = (newPage) => {
    if (newPage >= 1 && newPage <= $totalPages) {
        currentPage = newPage;
        dispatch('pageChange', newPage);  // Send the new page number to the parent
    }
};

Pagination UI: The component displays buttons for navigating between pages and shows the current page. The buttons are disabled if the user is on the first or last page to prevent invalid navigation.

    <button on:click={() => changePage(1)} disabled={currentPage === 1}>First</button>
    <button on:click={() => changePage(currentPage - 1)} disabled={currentPage === 1}>Previous</button>
    <span id="pageDisplay">Page {currentPage} of {$totalPages}</span>
    <button on:click={() => changePage(currentPage + 1)} disabled={currentPage === $totalPages}>Next</button>
    <button on:click={() => changePage($totalPages)} disabled={currentPage === $totalPages}>Last</button>

Data Flow and Communication Between Components

    LeaveManagement:
        Holds currentPage and currentStatus and manages the state of the application.
        Passes currentStatus and currentPage as props to the child components.
        Listens for the statusChange and pageChange events from the child components and updates the state accordingly.
        When either status or page changes, it fetches data using fetchLeaveRequests.

    ChangeStatus:
        Receives the currentStatus prop from the parent.
        Lets the user select a new status.
        Dispatches the statusChange event to the parent with the new status.

    Pagination:
        Receives the currentPage prop from the parent.
        Allows the user to navigate between pages and updates the currentPage value when a button is clicked.
        Dispatches the pageChange event to the parent with the new page number.

Example Flow of Actions:

    Status Change:
        User selects a new status (e.g., "Accepted") in the ChangeStatus component.
        The changeStatus function is called, dispatching the statusChange event to the parent (LeaveManagement).
        The parent updates currentStatus and resets currentPage to 1, then fetches the leave requests for the first page with the new status.

    Page Change:
        User clicks a pagination button (e.g., "Next") in the Pagination component.
        The changePage function is called, dispatching the pageChange event to the parent (LeaveManagement).
        The parent updates currentPage and fetches the leave requests for the new page.

Conclusion

In summary, the LeaveManagement component acts as the central controller, managing the state (status and page), and passing it down to the child components ChangeStatus and Pagination. These child components allow the user to change the status or navigate through pages. Through event dispatching, the child components communicate changes back to the parent, which updates the state and fetches the appropriate data. This creates a clean, modular flow of data and actions across components.



// Lifecycle Functions:
If server-side rendering (SSR) is used, the rest of the lifecycle functions will not be executed during SSR execution except for onDestroy.
Svelte’s lifecycle hooks are:

    onMount
    beforeUpdate
    afterUpdate
    onDestroy
    tick

Note1: If server-side rendering (SSR) is used, the rest of the lifecycle functions will not be executed during SSR execution except for onDestroy.

Note2: In Svelte, lifecycle functions can only be written when the component is initialized to bind callbacks to instances of the component. Do not place lifecycle functions in asynchronous methods such as setTimeout and setInterval.

1. onMount

    A callback that is executed immediately after the component is mounted to the DOM.

    onMount(callback: () => void)

    onMount(callback: () => () => void)

    onMount receives a callback function as an argument, and if a function is returned within the callback function, it is called when the component is unloaded.
    For sibling components, onMount is executed from top to bottom according to the order of component calls. 
    For parent and child components, onMount of the child component is executed before onMount of the parent component is executed, that is, from inside to outside.

2. beforeUpdate & afterUpdate

    beforeUpdate(callback: () => void)
    afterUpdate(callback: () => void)

    For sibling components, beforeUpdate and afterUpdate are still executed from top to bottom in the order of component calls. 
    For parent and child components, `beforeUpdate` of the parent component is executed first, and then `beforeUpdate` of the child component is executed.
    When the beforeUpdate of the child component is completed, the afterUpdate of the parent component is executed, and the afterUpdate of the child component is finally executed.

3. onDestroy

    onDestroy(callback: () => void)

    Between sibling components, onDestroy is still from top to bottom according to the calling order. 
    The parent and child components are from outside to inside, and the parent component executes onDestroy firstly, and then execute the child component’s onDestroy.
    The function returned by onMount will be executed when the component is destroyed and after executes onDestroy.

4. tick

    promise: Promise = tick()

    In Svelte, when a state state changes, the DOM is not updated immediately, but will wait until the next microtask to update. 
    During the waiting period, it will continue to listen for other state state changes, and then update the DOM uniformly in this microtask, which can reduce some unnecessary work and allow the browser to process these things in batches more efficiently.


## ORDER OF EXECUTION OF Lifecycle Functions:
    child destroy 1
    child destroy 2
    father destroy

    fater beforeupdate
    child beforeupdate 1
    child beforeupdate 2

    child mount 1
    child afterupdate 1

    child mount 2
    child afterupdate 2

    father mount
    father afterupdate


// KEYED EACH BLOCK:
                                    {#each array as item (key)}
                        Syntax:         <!-- HTML/Template for each item -->
                                    {/each}
                                         array is the array or list you're iterating over.
                        Where:           item is the alias representing each element in the array.
                                         key is a unique identifier for each element. It's typically a property of the object in the array, like an ID or a unique name.

                                    {#each leaves as leave (leave.id)}
                        Example:         <li>{leave.name} - {leave.color}</li>
                                    {/each}
                                        

    1. Why Use Keyed Each Block?
        In a regular {#each} loop, when an item changes, Svelte might re-render the entire list, even if only one item has changed. 
        This can be inefficient, especially when working with large lists or complex DOM structures.
        The keyed each block improves performance by assigning a unique identifier (the key) to each element. 
        This way, Svelte can identify which elements in the DOM correspond to the items in the array and only update those specific elements when the list changes, rather than re-rendering the entire list.

    2. How It Works:
        When you use a keyed each block, Svelte compares the key of each item in the array. 
        When the array is updated (items added, removed, or reordered), Svelte can compare the keys to see if the DOM elements for those keys already exist. 
        It will:
                Reuse elements with matching keys.
                Move elements that are reordered.
                Add or remove elements as necessary based on the changes in the array.
